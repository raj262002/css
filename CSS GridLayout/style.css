@import url('https://fonts.googleapis.com/css2?family=Poppins:ital,wght@0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&family=Roboto:ital,wght@0,100;0,300;0,400;0,500;1,100;1,300;1,400&display=swap');

* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

body {

    font-family: "roboto" , sans-serif;
    min-height: 100vh;

    /* making the body element to grid container */
    display: grid;
    grid-template-columns: repeat(9,1fr);
    grid-auto-rows: 50px auto 50px;

    /* now we define our items by names */
    grid-template-areas: /* 3 rows */
        "hd hd hd hd hd hd hd hd hd"  /* header . declaring hd 9 times 
        means header will be spamed over in 9 columns*/
        "mn mn mn mn mn mn mn sb sb" /* main sidebars . so similarly 7 columns for main part and 2 columns for sidebars*/
        "ft ft ft ft ft ft ft ft ft"; /* footer */ /* you can open inspect ---> layout ---> grid overlays --> body container for more understanding  */

    column-gap: 0.5rem;
}

/* define the areas */

.el {
    background-color: rebeccapurple;
    color: #fff;
    display: grid;
    place-content: center;
}

.header {
    grid-area: hd;
}

.sidebar {
    grid-area: sb;
    background-color: #00f;
}

.footer {
    grid-area: ft;
}

a {
    color: whitesmoke;
}

.container {
    grid-area: mn;


    min-height: 400px;
    display: grid;/* instantly will make the items to grid */
    /* grid-auto-flow: column;  /*will place them into column to act as columns */
    /* grid-template-columns: /*200px 100px 200px; will make three columns of given units or measurements respectively , and we can use the fraction unit (fr) which is specially used for grids*/
    /* i.e */
    /* grid-template-columns: 2fr 1fr 1fr; /*will take all the space browser window */
    /* grid-template-columns: repeat(4, 1fr); /*will divide the grids item into 4 qual columns of 1fr */
    grid-template-columns: repeat(2, 1fr 2fr); /*will place the grid into 4 columns in 1fr 2fr 1fr 2fr pattern*/
    /* grid-auto-rows: 200px; /* will give the rows a width or height dont know of 200px */
    grid-auto-rows: minmax(250rem auto); /* minmax() is funvtion that allows to take min value first and then max value in this case rows will start with height 150px and as much as the containers allows to it */
    row-gap: 1em; /*  gap betwen the rows */
    column-gap: 1rem;
    /* gap: 1em 0.5em; /*it applies on both rows and columns respectively and if only one value is written on it the value will apply on both */



}

.box {
    background-color: #000;
    color: #fff;
    font-size: 2rem;
    padding: 0.5rem;
}

.box:first-child {
    background-color: #00f;
    /* grid-column-start: 1;
    grid-column-end: 4;/* will spread the 1st box till the 4th line column wise(spanning)*/
    /* we can see in inspect -> layout (dev tools) */
    /* similaraly with row */
    /*grid-row-start: 1;
    grid-row-end: 3; */ /* instead of all this */
    /* gird-column : first line (1) / last line (4); */
    /* gird-row : first line (1) / last line (4) ;*/
    grid-row :  1 / 3;
    grid-column :  1 / 4;

    /* just like flex we can also make a grid item into a grid container */
    display: grid;
    align-content: center;
    justify-content: center;/* elment inside the grid item will be at center . we can also use start and end property of align-content: and justify-content to have the desired position of the item */
    /* short form of above */
    /* place-content: end(align-content) center(justify-content); only one value will take it as the both */

}

.box:nth-child(2){
    background-color: purple;
    grid-column: 1 / 5;
    grid-row: 3 / 4;
}

/* /////////////////////////////////////////////////////// */

/* visit cssgridgarden.com for better practice */

/* /////////////////////////////////////////////////////// */